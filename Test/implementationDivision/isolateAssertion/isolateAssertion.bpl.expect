implementation IsolateAssertion/assert@20(x: int, y: int)
{

  anon0:
    goto anon7_Then, anon7_Else;

  anon7_Then:
    assume {:partition} x > 0;
    assume z#AT#0 == 0 + 1;
    assume z#AT#2 == z#AT#0;
    goto anon8_Then, anon8_Else;

  anon7_Else:
    assume {:partition} 0 >= x;
    assume z#AT#1 == 0 + 2;
    assume z#AT#2 == z#AT#1;
    goto anon8_Then, anon8_Else;

  anon8_Then:
    assume {:partition} y > 0;
    assume z#AT#3 == z#AT#2 + 3;
    assume z#AT#5 == z#AT#3;
    goto anon6;

  anon8_Else:
    assume {:partition} 0 >= y;
    assume z#AT#4 == z#AT#2 + 4;
    assume z#AT#5 == z#AT#4;
    goto anon6;

  anon6:
    assume z#AT#5 > 1;
    assert {:isolate} z#AT#5 > 5;
    return;
}


implementation IsolateAssertion(x: int, y: int)
{

  anon0:
    goto anon7_Then, anon7_Else;

  anon7_Then:
    assume {:partition} x > 0;
    assume z#AT#0 == 0 + 1;
    assume z#AT#2 == z#AT#0;
    goto anon8_Then, anon8_Else;

  anon7_Else:
    assume {:partition} 0 >= x;
    assume z#AT#1 == 0 + 2;
    assume z#AT#2 == z#AT#1;
    goto anon8_Then, anon8_Else;

  anon8_Then:
    assume {:partition} y > 0;
    assume z#AT#3 == z#AT#2 + 3;
    assume z#AT#5 == z#AT#3;
    goto anon6;

  anon8_Else:
    assume {:partition} 0 >= y;
    assume z#AT#4 == z#AT#2 + 4;
    assume z#AT#5 == z#AT#4;
    goto anon6;

  anon6:
    assert z#AT#5 > 1;
    assume z#AT#5 > 5;
    assert z#AT#5 > 6;
    return;
}


isolateAssertion.bpl(20,3): Error: this assertion could not be proved
isolateAssertion.bpl(21,3): Error: this assertion could not be proved
implementation IsolatePathsAssertion/assert@40[29,35](x: int, y: int)
{

  anon0:
    assume {:partition} x > 0;
    assume z#AT#0 == 0 + 1;
    assume z#AT#2 == z#AT#0;
    assume {:partition} y > 0;
    assume z#AT#3 == z#AT#2 + 3;
    assume z#AT#5 == z#AT#3;
    assume z#AT#5 > 1;
    assert {:isolate "paths"} z#AT#5 > 5;
    return;
}


implementation IsolatePathsAssertion/assert@40[31,35](x: int, y: int)
{

  anon0:
    assume {:partition} 0 >= x;
    assume z#AT#1 == 0 + 2;
    assume z#AT#2 == z#AT#1;
    assume {:partition} y > 0;
    assume z#AT#3 == z#AT#2 + 3;
    assume z#AT#5 == z#AT#3;
    assume z#AT#5 > 1;
    assert {:isolate "paths"} z#AT#5 > 5;
    return;
}


implementation IsolatePathsAssertion/assert@40[29,37](x: int, y: int)
{

  anon0:
    assume {:partition} x > 0;
    assume z#AT#0 == 0 + 1;
    assume z#AT#2 == z#AT#0;
    assume {:partition} 0 >= y;
    assume z#AT#4 == z#AT#2 + 4;
    assume z#AT#5 == z#AT#4;
    assume z#AT#5 > 1;
    assert {:isolate "paths"} z#AT#5 > 5;
    return;
}


implementation IsolatePathsAssertion/assert@40[31,37](x: int, y: int)
{

  anon0:
    assume {:partition} 0 >= x;
    assume z#AT#1 == 0 + 2;
    assume z#AT#2 == z#AT#1;
    assume {:partition} 0 >= y;
    assume z#AT#4 == z#AT#2 + 4;
    assume z#AT#5 == z#AT#4;
    assume z#AT#5 > 1;
    assert {:isolate "paths"} z#AT#5 > 5;
    return;
}


implementation IsolatePathsAssertion(x: int, y: int)
{

  anon0:
    goto anon7_Then, anon7_Else;

  anon7_Then:
    assume {:partition} x > 0;
    assume z#AT#0 == 0 + 1;
    assume z#AT#2 == z#AT#0;
    goto anon8_Then, anon8_Else;

  anon7_Else:
    assume {:partition} 0 >= x;
    assume z#AT#1 == 0 + 2;
    assume z#AT#2 == z#AT#1;
    goto anon8_Then, anon8_Else;

  anon8_Then:
    assume {:partition} y > 0;
    assume z#AT#3 == z#AT#2 + 3;
    assume z#AT#5 == z#AT#3;
    goto anon6;

  anon8_Else:
    assume {:partition} 0 >= y;
    assume z#AT#4 == z#AT#2 + 4;
    assume z#AT#5 == z#AT#4;
    goto anon6;

  anon6:
    assert z#AT#5 > 1;
    assume z#AT#5 > 5;
    assert z#AT#5 > 6;
    return;
}


isolateAssertion.bpl(40,3): Error: this assertion could not be proved
isolateAssertion.bpl(41,3): Error: this assertion could not be proved

Boogie program verifier finished with 0 verified, 6 errors
